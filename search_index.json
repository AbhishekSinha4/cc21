[["index.html", "Spring 2021 EDAV Community Contributions Chapter 1 Community contribution assignment 1.1 Logistics", " Spring 2021 EDAV Community Contributions 2021-03-22 Chapter 1 Community contribution assignment This fairly open-ended assignment provides an opportunity to receive credit for contributing to the collective learning of the class, and perhaps beyond. It should reflect a minimum of 2-3 hours of work. To complete the assignment you must submit a short description of your contribution. If appropriate, attach relevant files. There are many ways in which you can contribute: lead a Zoom conversation on anything: hobby, happy hour, etc. Think about how you will organize it… do students need to sign up? Will you have breakout rooms? help students find final project partners give a well-rehearsed 5 minute lightning talk in class on a datavis topic (theory or tool) (email me to set the date – it may be after the assignment due date but you need to schedule it before) create a video tutorial (any length) create a cheatsheet or other resource be a Piazza super user (that is, answer a lot of questions) write a tutorial for a tool that’s not well documented translate a useful resource into another language build a viz product (ex. htmlwidget) for class use create a web site for sharing class resources publicly provide significant subject matter help to a classmate organize and lead a help session on a particular topic (the date may be after the assignment due date but you need to schedule it before) [your own idea] You may draw on and expand existing resources. When doing so, it is critical that you cite your sources. Examples from last year: https://jtr13.github.io/cc20/ 1.1 Logistics 1.1.1 Groups You may work on your own or with a partner of your choosing. If you work alone, you do not need to join a group of 1, you simply submit your work on CourseWorks as with any other solo assignment. If you work with a partner, add yourselves to a group on the CC page on the People tab. Piazza can be used to find partners with similar interests. 1.1.2 Submitting your assignment You must submit your assignment twice: once on CourseWorks (so it can be graded) and once to the class, details to follow. CourseWorks submission: submit your work as an .Rmd and rendered .pdf or .html file, just as with problem sets. If your work does not lend itself to that format, then write in the assignment text box what you did. Class (GitHub) submission: see the next chapter. "],["github-submission-instructions.html", "Chapter 2 GitHub submission instructions 2.1 Background 2.2 Preparing your .Rmd file 2.3 Submission steps 2.4 Optional tweaks 2.5 FAQ", " Chapter 2 GitHub submission instructions This chapter gives you all the information you need to upload your community contribution. Please read this entire document carefully before making your submission. Of particular note is the fact that bookdown requires a different .Rmd format than you’re used to, so you must make changes to the beginning of the file as described below before submitting. 2.1 Background This web site makes use of the bookdown package to render a collection of .Rmd files into a nicely formatted online book with chapters and subchapters. Your job will be to submit a slightly modified version of your community contribution .Rmd file to the GitHub repository where the source files for this web site are stored. On the backend, the admins will divide the chapters into book sections and order them. If your community contribution is in a different format, then create a short .Rmd file that explains what you did, and includes links to any relevant files, such as slides, etc. which you can post on your GitHub repo (or another online site.) 2.2 Preparing your .Rmd file You should only submit ONE Rmd file. After completing these modifications, your .Rmd should look like this sample .Rmd. Create a concise, descriptive name for your project. For instance, name it base_r_ggplot_graph or something similar if your work is about contrasting/working with base R graphics and ggplot2 graphics. Check the .Rmd filenames in the project repo to make sure your name isn’t already taken. Your project name should be words only and joined with underscores, no white space. Use .Rmd not .rmd. In addition, all letters must be lowercase. Create a copy of your .Rmd file with the new name. Completely delete the YAML header (the section at the top of the .Rmd that includes name, title, date, output, etc.) including the --- line. Choose a short, descriptive, human readable title for your project as your title will show up in the table of contents – look at examples in the 2020 EDAV rendered book of community contributions https://jtr13.github.io/cc20. Capitalize the first letter only (“sentence case”). On the first line of your document, enter a single hashtag, followed by a single whitespace, and then your title. It is important to follow this format so that bookdown renders your title as a header. Do not use single # headers anywhere else in the document. Note: if your chapter is the first in a section, a second # header and section description will be requested during the pull-request and merge phase. The second line should be blank, followed by your name(s): # Base R vs. ggplot2 Aaron Burr and Alexander Hamilton Your content starts here. If your project requires data, please use a built-in dataset or read directly from a URL, such as: df &lt;- readr::read_csv(\"https://people.sc.fsu.edu/~jburkardt/data/csv/addresses.csv\") If you absolutely must include a data file, please use a small one, as for many reasons it is desirable to keep the repository size as small as possible. If you have included a setup chunk in your Rmd file, please remember to remove the label setup in the chunk, i.e., use: {r, include=FALSE} instead of: {r setup, include=FALSE} If your project requires libraries to be installed and included in the document, please adhere to the following conventions. Do not evaluate any install.packages() statements in your document. Consumers of an .Rmd file won’t want packages to get installed when they knit your document. Include any library() statements at the top of your Rmd file, below the title, name, and setup, but above any content. If your chapter requires the installation of a package from source (is a GitHub installation), please add a comment identifying it as such. Please mention this as well in your PR. Here is an example library() section with install statements that won’t be evaluated: install.packages(&quot;devtools&quot;) # used for installation from source install.packages(&quot;dplyr&quot;) install.packages(&quot;ggplot2&quot;) library(&quot;devtools&quot;) devtools::install_github(&quot;twitter/AnomalyDetection&quot;) library(&quot;AnomalyDetection&quot;) # must be installed from source library(&quot;dplyr&quot;) library(&quot;ggplot2&quot;) You could include both sections, or you could just include the second library() section and trust R users to install any packages themselves. If you developed your Rmd file before moving your library() statements above the rest of the file content, it is highly recommended to knit and review your document again. This may change the namespace that was available in each section of your code during development, causing a function not to work or to exhibit unexpected behavior. This common issue is mentioned in the EDAV R Basics “Functions stop working” section. Your file should not contain getwd() / setwd() calls (you should never use these in scripts anyway!) nor write statements. Want to get fancy? See the optional tweaks section below. 2.3 Submission steps To submit your work, we will be following “Workflow #4” – that is submitting a pull request to someone else’s repository to which you do not have write access. Instructions are available in this tutorial. They are repeated below in abbreviated form, with specific instructions on naming conventions, content information, and other important details. Fork cc21 repo (this repo) to your GitHub account. Clone/download the forked repo to your local computer. Create a new branch and name it with your project name, in our case sample_project. Do not skip this step. We will not merge your PR if it doesn’t come from a branch. If you already forgot to do this, check this tutorial for how to fix it. Copy your modified .Rmd file with the same name into the root directory on the branch. In our example, it is sample_project.Rmd. Do not include an .html file. (In order for the bookdown package to work, all .Rmd files will be rendered behind the scenes.) [OPTIONAL] If you have other resources (such as images) included in your project, create a folder under resources/. In our example, it is resources/sample_project/. Put the resources files there. Be sure to change all the links in your .Rmd to include resources/.../, for example: ![Test Photo](resources/sample_project/election.jpg) When you are ready to submit your project, push your branch to your remote repo. Follow this tutorial to create a pull request. At this point a back and forth will begin with the team managing the pull requests. If you are asked to make changes, simply make the changes on your local branch, save, commit, and push to GitHub. The new commits will be added to your pull request; you do not need to, and should not, create a new pull request. (If, based on the circumstances, it does make sense to close the pull request and start a new one, we will tell you.) Once your pull request is merged, it’s fine to delete your local clone (folder) as well as the forked repository in your GitHub account. 2.4 Optional tweaks If you prefer for links from your chapter to open in new tabs, add {target=\"_blank\"} after the link, such as: [edav.info](edav.info){target=\"_blank\"} Note that your headers (##, ###, etc.) will be converted to numbered headings as such: ## –&gt; 3.1 ### –&gt; 3.1.1 These headings will appear as chapter subheadings and sub-subheadings in the navigation panel on the left. Think about a logical structure for users to navigate your chapter. We recommend using only ## and ### headings since “sub-sub-subheadings” such as 4.1.3.4 are generally unnecessary and look messy. Unfortunately, there’s no simple way to preview your chapter before it’s actually merged into the project. (bookdown has preview_chapter() option but it only works after the entire book has been rendered at least once and that will become more and more complex and require more and more packages as the project grows.) If you really want to preview it, fork and clone this minimal bookdown repo, add your .Rmd file, click the “Build book” button on the Build tab (next to Git), and then open any of the .html files in the _book folder in a web browser to see the rendered book. If you’re interested in more bookdown options, see the official reference book. Have more useful tweaks to share? Submit an issue or PR. 2.5 FAQ 2.5.1 What should I expect after creating a pull request? Within a week after you create a pull request, we will apply a label to it and assign an administrator who will review all the files you submit to see if they meet the requirements. It will take some time before we can process all the pull requests, so as long as you see your pull request has been labeled and assigned to an admin, don’t worry. However, if the admin contacts you regarding the pull request, that usually means your files fail to meet some requirements. The admin will clearly state what is wrong, so please fix them as soon as possible. 2.5.2 What if I catch mistakes before my pull request is merged? Just make the changes on your branch, commit and push them to GitHub. They will automatically be added to the pull request. 2.5.3 What if I catch mistakes after my pull request is merged? You may submit additional pull requests to fix material on the site. If the edits are small, such as fixing typos, it is easiest to make the edits directly on GitHub, following these instructions. We will merge first pull requests before edits, so please be patient. 2.5.4 Other questions If you encounter other problems, please submit an issue and we will look into it. Thank you for your contributions! "],["sample-project.html", "Chapter 3 Sample project", " Chapter 3 Sample project Joe Biden and Donald Trump This chapter gives a sample layout of your Rmd file. Test Photo "],["introduction-to-quandl.html", "Chapter 4 Introduction to Quandl() 4.1 INTRODUCTION", " Chapter 4 Introduction to Quandl() Aiqi Zhou (az2638) Quandl::Quandl() 4.1 INTRODUCTION Quandl is a source of financial, economic and alternative data. It is acquired by Nasdaq in 2018 and has 20+ million data sets available. Users can acquire free data, purchase data or sell data at Quandl. You can find data on a large variety of types of data from company data to the demographics data of a country. More can be explored on Quandl’s website. https://www.quandl.com/search The data is readily available in json, csv, xml formats and can be loaded in MatLab, R, Python, etc. All the data can be loaded in R through the package Quandl. 4.1.1 Installation : install.packages(“Quandl”) 4.1.2 Load Package library(Quandl) library(Quandl) 4.1.3 Set API key Quandl allows 50 calls a day for anonymous users. Sign up for a free account to make unlimited calls every day. Set up your own account and copy your api_key into the following function Quandl.api_key(‘your_key’) Quandl.api_key(&#39;JrvHzZcnakybdzAUChjn&#39;) 4.1.4 Loading Data All available data can be found and viewed on https://www.quandl.com/search. This package includes many free datasets, however, some datasets requires an account or is for paid use only. To call on a data set in R. You must find the Quandl code of the data set. The codes can be found in the documentation page of the data set. 4.1.4.1 For example The follow dataset is called the “Federal Reserve Economic Data”, which has the code FRED. This dataset has 335,000+ time-series data. To call on certain aspect like the GDP of this data set, the Quandl code is “FRED/GDP”. mydata = Quandl(&quot;FRED/GDP&quot;) head(mydata) ## Date Value ## 1 2020-10-01 21487.90 ## 2 2020-07-01 21170.25 ## 3 2020-04-01 19520.11 ## 4 2020-01-01 21561.14 ## 5 2019-10-01 21747.39 ## 6 2019-07-01 21540.33 To call on another aspect like disposable personal income, the Quandl code is “FRED/DSPI” mydata= Quandl(&quot;FRED/DSPI&quot;) head(mydata) ## Date Value ## 1 2021-01-01 19217.7 ## 2 2020-12-01 17254.5 ## 3 2020-11-01 17151.4 ## 4 2020-10-01 17398.9 ## 5 2020-09-01 17546.8 ## 6 2020-08-01 17430.4 4.1.5 Type The data can be called in different formats. The default of the data is data frame, which can have an argument type = “raw” “raw” “ts” “zoo” “xts” “timeSeries” mydata = Quandl(&quot;FRED/GDP&quot;, type=&quot;xts&quot;) head(mydata) ## [,1] ## 1947 Q1 243.164 ## 1947 Q2 245.968 ## 1947 Q3 249.585 ## 1947 Q4 259.745 ## 1948 Q1 265.742 ## 1948 Q2 272.567 mydata = Quandl(&quot;FRED/GDP&quot;, type=&quot;ts&quot;) head(mydata) ## [1] 243.164 245.968 249.585 259.745 265.742 272.567 mydata = Quandl(&quot;FRED/GDP&quot;, type=&quot;zoo&quot;) head(mydata) ## 1947 Q1 1947 Q2 1947 Q3 1947 Q4 1948 Q1 1948 Q2 ## 243.164 245.968 249.585 259.745 265.742 272.567 4.1.6 Transform There are some preprocessing can be done when loading the data. By adding a transform argument in Quandl(), the data can have the following types of transformations. \"\" = Default original data “diff” = row on row change in value “rdiff” = row on row percentage change “normalize” = scale to start at 100 “cumul” = cumulative sum “rdiff_from” = latest value as % increment 4.1.6.1 For example the percentage change of GDP by year mydata = Quandl(&quot;FRED/GDP&quot;,transform = &quot;rdiff&quot; ) head(mydata) ## Date Value ## 1 2020-10-01 0.015004262 ## 2 2020-07-01 0.084535264 ## 3 2020-04-01 -0.094662207 ## 4 2020-01-01 -0.008564474 ## 5 2019-10-01 0.009613086 ## 6 2019-07-01 0.009866349 4.1.7 Order The data can be ordered by date upon it is loaded. Default is descending order by date. - “desc” - “asc” mydata = Quandl(&quot;FRED/GDP&quot;, order = &quot;asc&quot;) head(mydata) ## Date Value ## 1 1947-01-01 243.164 ## 2 1947-04-01 245.968 ## 3 1947-07-01 249.585 ## 4 1947-10-01 259.745 ## 5 1948-01-01 265.742 ## 6 1948-04-01 272.567 4.1.8 collapse Since all data have a time associated. Quandl allows you to preprocess the data by specifying the frequency of the data. ’’ ‘daily’ ‘weekly’ ‘monthly’ ‘quarterly’ ‘annual’ mydata = Quandl(&quot;FRED/GDP&quot;, collapse = &quot;quarterly&quot;) head(mydata) ## Date Value ## 1 2020-12-31 21487.90 ## 2 2020-09-30 21170.25 ## 3 2020-06-30 19520.11 ## 4 2020-03-31 21561.14 ## 5 2019-12-31 21747.39 ## 6 2019-09-30 21540.33 4.1.9 Slicing data 4.1.9.1 Rows Because the data we are using is time series data, we can specify the range of row of the data set, using the start and end date arguments. mydata = Quandl(&quot;FRED/GDP&quot;, start_date=&quot;2001-12-31&quot;, end_date=&quot;2005-12-31&quot;) head(mydata) ## Date Value ## 1 2005-10-01 13332.32 ## 2 2005-07-01 13142.87 ## 3 2005-04-01 12910.02 ## 4 2005-01-01 12761.34 ## 5 2004-10-01 12522.42 ## 6 2004-07-01 12303.34 4.1.9.2 Columns To get multiple columns of data from Quandl, the data can be called in the format: Quandl(c(“col_1”, “col_2”)) mydata = Quandl(c(&quot;FRED/GDP&quot;, &quot;FRED/DSPI&quot;),start_date=&quot;2001-12-31&quot;, end_date=&quot;2005-12-31&quot;) head(mydata) ## Date FRED.GDP - Value FRED.DSPI - Value ## 1 2002-01-01 10788.95 7962.4 ## 2 2002-02-01 NA 7981.9 ## 3 2002-03-01 NA 8003.6 ## 4 2002-04-01 10893.21 8066.8 ## 5 2002-05-01 NA 8099.5 ## 6 2002-06-01 NA 8127.2 4.1.10 Finding a dataset in Quandl You can look for certain data sets within R using Quandl.search() Format: Quandl.search(query = “search keyword”, page = # , source = “source to search from if known”, silent = TRUE/FALSE) query: mandatory argument that you want to search for page: which page of search result you want. Default page = 1. source: specific source you want to search from. silent: print the results when FALSE. Nothing prints when true. 4.1.10.1 Example search for Japan Quandl.search(query = &quot;Japan&quot;, page = 1 , silent = FALSE) ## Japanese Intervention: Japanese Bank purchases of USD against JPY ## Code: FRED/JPINTDUSDJPY ## Desc: 100 Million Yen Not Seasonally Adjusted, (+) numbers mean purchases of the USD (sell Yen), (-) numbers mean sales of USD (buy Yen). Unpublished data. ## Freq: daily ## Cols: DATE | VALUE ## ## NASDAQ Japan Retail JPY Index (NQJP5300JPY) ## Code: NASDAQOMX/NQJP5300JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP5300JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP5300JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value ## ## NASDAQ Japan Media JPY Index (NQJP5500JPY) ## Code: NASDAQOMX/NQJP5500JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP5500JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP5500JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value ## ## NASDAQ Japan Tech JPY Index (NQJP9000JPY) ## Code: NASDAQOMX/NQJP9000JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP9000JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP9000JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value ## ## NASDAQ Japan Telecom JPY Index (NQJP6000JPY) ## Code: NASDAQOMX/NQJP6000JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP6000JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP6000JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value ## ## NASDAQ Japan Utilities JPY Index (NQJP7000JPY) ## Code: NASDAQOMX/NQJP7000JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP7000JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP7000JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value ## ## NASDAQ Japan Banks JPY Index (NQJP8300JPY) ## Code: NASDAQOMX/NQJP8300JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP8300JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP8300JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value ## ## NASDAQ Japan Inds JPY Index (NQJP2000JPY) ## Code: NASDAQOMX/NQJP2000JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP2000JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP2000JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value ## ## NASDAQ Japan Ins JPY Index (NQJP8500JPY) ## Code: NASDAQOMX/NQJP8500JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP8500JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP8500JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value ## ## NASDAQ Japan Financials JPY Index (NQJP8000JPY) ## Code: NASDAQOMX/NQJP8000JPY ## Desc: For detailed information, see &lt;a href=https://indexes.nasdaqomx.com/Index/Overview/NQJP8000JPY&gt;https://indexes.nasdaqomx.com/Index/Overview/NQJP8000JPY&lt;/a&gt; ## Freq: daily ## Cols: Trade Date | Index Value | High | Low | Total Market Value | Dividend Market Value You can pick which data set to use from the search result. 4.1.11 Example The following is a quick example of getting data from the data set United Nations Industrial Commodities. From the documentation of this data set, we can learn what we are interested in. https://www.quandl.com/data/UINC-United-Nations-Industrial-Commodities Here I want to plot the time series data of Beer production of Germany. The code for this information is “UINC/BEER_DEU”. I want to plot the time series, then the data need to be in the form of “ts” beer = Quandl(&quot;UINC/BEER_DEU&quot;,type = &quot;ts&quot;) head(beer) ## Beer (Mil. USD) Beer (Thousand hectolitres) ## [1,] 10021.504 111875.4 ## [2,] 9468.029 108937.5 ## [3,] 8258.888 108729.5 ## [4,] 7873.553 106993.0 ## [5,] 7625.868 107479.3 ## [6,] 6420.827 106877.4 beer = Quandl(&quot;UINC/BEER_DEU&quot;,type = &quot;ts&quot;) plot.ts(beer) If I want to see the yearly percentage change of the data, we need to add a transform argument “rdiff” beer_per_change = Quandl(&quot;UINC/BEER_DEU&quot;,type = &quot;ts&quot;,transform = &#39;rdiff&#39;) plot.ts(beer_per_change) "],["date-time-handling-in-r-cheatsheet.html", "Chapter 5 Date-Time Handling in R Cheatsheet", " Chapter 5 Date-Time Handling in R Cheatsheet Saloni Gupta Ajay Kumar This project includes a pdf version cheatsheet for basic date-time handling in R. This includes conversion to Date and Datetime objects, extraction of date elements, date arithmetic and time zone conversions. Click the following link to check out the cheatsheet: https://github.com/C130187/EDAVCC/blob/main/DateTime-cheatsheet-in-R.pdf "],["tidy-data-cheatsheet.html", "Chapter 6 Tidy data Cheatsheet", " Chapter 6 Tidy data Cheatsheet Yifan Jing This project includes a pdf version cheatsheet for tidy data. It includes functions in tidyr and dplyr. The link is below: https://github.com/JackJing001/STAT5702/blob/main/Tidy%20data%20cheat%20sheet.pdf "],["colors-in-r-chinese-translation.html", "Chapter 7 Colors_in_R_Chinese_translation 7.1 在R中使用颜色", " Chapter 7 Colors_in_R_Chinese_translation Xiaoyan Li Source: http://www.sthda.com/english/wiki/colors-in-r 7.1 在R中使用颜色 在 R 中，颜色可以使用指定名称（例如 col = “red”）或使用十六进制编码（如 col =“#FFCC00”）。您还可以使用其他颜色系统，例如从 R 包 RColorBrewer 中获取的彩色系统。 7.1.1 R自带的指定颜色名称 我们将使用以下自定义 R 函数生成一张包含 R 中可用的颜色名称的图： # 生成一张包含R自带颜色名称的图片 #++++++++++++++++++++++++++++++++++++++++++++ # cl : 要绘制的颜色矢量 # bg: 图片背景 # rot: 字体旋转角度 # usage = showCols(bg=&quot;gray33&quot;) showCols &lt;- function(cl=colors(), bg = &quot;grey&quot;, cex = 0.75, rot = 30) { m &lt;- ceiling(sqrt(n &lt;-length(cl))) length(cl) &lt;- m*m; cm &lt;- matrix(cl, m) require(&quot;grid&quot;) grid.newpage(); vp &lt;- viewport(w = .92, h = .92) grid.rect(gp=gpar(fill=bg)) grid.text(cm, x = col(cm)/m, y = rev(row(cm))/m, rot = rot, vp=vp, gp=gpar(cex = cex, col = cm)) } 下图包含前60种颜色的名称： # 前60种颜色的名称 showCols(bg=&quot;gray20&quot;,cl=colors()[1:60], rot=30, cex=0.9) # 使用颜色名称绘制柱状图 barplot(c(2,5), col=c(&quot;chartreuse&quot;, &quot;blue4&quot;)) 要查看 R 的所有内置颜色名称（n = 657），请使用以下 R 代码： showCols(cl= colors(), bg=&quot;gray33&quot;, rot=30, cex=0.75) 7.1.2 使用十六进制编码指定颜色 颜色可以通过十六进制编码指定，例如“#FFC00” （来源：http://www.visibone.com） # 用十六进制编码绘制柱状图 barplot(c(2,5), col=c(&quot;#009999&quot;, &quot;#0000FF&quot;)) 7.1.3 使用 RColorBrewer 调色盘 你需要安装 RColorBrewer 包： # install.packages(&quot;RColorBrewer&quot;) 与 RColorBrewer 包关联的调色板可以使用 display.brewer.all（）绘制，如下： library(&quot;RColorBrewer&quot;) display.brewer.all() 调色板有3种类型：循序、发散和定性。 循序调色板适合用于从低到高（梯度）的有序数据。调色板名称分别是是： Blues, BuGn, BuPu, GnBu, Greens, Greys, Oranges, OrRd, PuBu, PuBuGn, PuRd, Purples, RdPu, Reds, YlGn, YlGnBu YlOrBr, YlOrRd。 发散调色板重点强调了数据范围的两极和中间值。调色板分别有：BrBG, PiYG, PRGn, PuOr, RdBu, RdGy, RdYlBu, RdYlGn, Spectral。 定性调色板最适合表示名义数据或分类数据，并不表明群体之间的幅度差异。调色板名称是： Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3。 你也可以指定查看单个的RColorBrewer调色盘： # 查看单个调色板 display.brewer.pal(n = 8, name = &#39;RdBu&#39;) # 查看单个调色板中颜色的十六进制编码 brewer.pal(n = 8, name = &quot;RdBu&quot;) ## [1] &quot;#B2182B&quot; &quot;#D6604D&quot; &quot;#F4A582&quot; &quot;#FDDBC7&quot; &quot;#D1E5F0&quot; &quot;#92C5DE&quot; &quot;#4393C3&quot; ## [8] &quot;#2166AC&quot; # 用 RColorBrewer 绘制柱状图 barplot(c(2,5,7), col=brewer.pal(n = 3, name = &quot;RdBu&quot;)) 7.1.4 使用 Wes Anderson 调色盘 此调色板可以安装和加载如下： # 安装 # install.packages(&quot;wesanderson&quot;) # 加载 library(wesanderson) 提供调色盘如下： 使用调色板： # 一个简单的柱状图 barplot(c(2,5,7), col=wes_palette(n=3, name=&quot;GrandBudapest1&quot;)) library(ggplot2) ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + geom_point(size = 2) + scale_color_manual(values = wes_palette(n=3, name=&quot;GrandBudapest1&quot;)) 7.1.5 创建一个n个连续颜色的矢量 你也可以使用函数rainbow(n), heat.colors(n), terrain.colors(n), topo.colors(n), and cm.colors(n)创建一个包含n个连续的颜色的矢量。 # 使用彩虹的颜色 barplot(1:5, col=rainbow(5)) # 使用热量图的颜色 barplot(1:5, col=heat.colors(5)) # 使用 terrain.colors barplot(1:5, col=terrain.colors(5)) # 使用 topo.colors barplot(1:5, col=topo.colors(5)) # 使用 cm.colors barplot(1:5, col=cm.colors(5)) "],["introduction-to-rstudio-in-portuguese.html", "Chapter 8 Introduction to Rstudio in Portuguese", " Chapter 8 Introduction to Rstudio in Portuguese Barbara Bettencourt For my community contribution I translated a document on an introduction to Rstudio from Princeton University to Portuguese. You can find the pdf here: https://github.com/barbarabettencourt/community_contribution/blob/main/RStudio101Translation.pdf "],["github-initial-setup.html", "Chapter 9 Github initial setup 9.1 GitHub Actions 9.2 DESCRIPTION file", " Chapter 9 Github initial setup Joyce Robbins Create a new repository. (For cc21 I started with a new repo on GitHub since I wanted the main branch to be called main and that did not seem possible with usethis functions or RStudio \" Copy the following files from the previous version and edit as necessary. (Search for name of previous repo to catch all instances.) _bookdown.yml _common.R _output.yml appendix_initial_setup.Rmd appendix_pull_request_tutorial.Rmd DESCRIPTION index.Rmd sample_project.Rmd /.github /resources/sample_project /resources/tutorial_pull_request_mergers 9.1 GitHub Actions 9.1.1 Secrets https://medium.com/@delucmat/how-to-publish-bookdown-projects-with-github-actions-on-github-pages-6e6aecc7331e Secret #1: Create a token here https://github.com/settings/tokens and paste it in a secret in the repo named GH_PAT Secret #2: Add a Secret called EMAIL with GitHub email See: https://github.com/r-lib/actions/tree/master/examples#managing-secrets 9.1.2 Create a gh-pages branch: https://jiafulow.github.io/blog/2020/07/09/create-gh-pages-branch-in-existing-repo/ (May happen automatically???) 9.1.3 GitHub Pages in repo settings (May happen automatically???) 9.2 DESCRIPTION file Need a better process… Downloaded submissions from CourseWorks Create DESCRIPTION file. Add add dependencies with projthis::proj_update_deps() https://twitter.com/ijlyttle/status/1370776366585614342 Add these Imports to the real DESCRIPTION file. Found problematic packages by looking at reverse dependencies of the packages that failed to install: devtools::revdep() Also used pak::pkg_deps_tree() Problems: magick rJava dependency of qdap "],["tutorial-for-pull-request-mergers.html", "Chapter 10 Tutorial for pull request mergers 10.1 General 10.2 Check branch 10.3 Examine files that were added or modified 10.4 Check .Rmd filename 10.5 Check .Rmd file contents 10.6 Request changes 10.7 Merge the pull request", " Chapter 10 Tutorial for pull request mergers 10.1 General The following is a checklist of steps to perform before merging the pull request. At any point, if you’re not sure what to do, request a review from one of the PR leaders. 10.2 Check branch PR should be submitted from a non-main branch. If PR was submitted from the main branch, provide these instructions on how to fix the problem: Close this PR. Follow the instructions here for forgetting to branch if you committed and pushed to GitHub: https://edav.info/github#fixing-mistakes If you have trouble with 2., then delete the local folder of the cc21 project and reclone. (In other words, start over.) Open a new PR. 10.3 Examine files that were added or modified There should be only ONE .Rmd file. All of the additional resources should be in the resources/&lt;project_name&gt;/ folder. There should be no other files in the root directory besides the .Rmd file. 10.4 Check .Rmd filename The .Rmd filename should be words only and joined with underscores, no white space. (Update: It does not need to be the same as the branch name.) The .Rmd filename can only contain lowercase letters. (Otherwise the filenames do not sort nicely on the repo home page.) 10.5 Check .Rmd file contents The file should not contain a YAML header nor a --- line. The second line should be blank, followed by the author name(s). The first line should start with a single hashtag #, followed by a single whitespace, and then the title. There should be no additional single hashtag headers in the chapter. (If there are, new chapters will be created.) Other hashtag headers should not be followed by numbers since the hashtags will create numbered subheadings. Correct: ## Subheading. Incorrect: ## 3. Subheading. If the file contains a setup chunk in .Rmd file, it should not contain a setup label. (The bookdown render will fail if there are duplicate chunk labels.) i.e. use {r, include=FALSE} instead of {r setup, include=FALSE}. See sample .Rmd Links to internal files must contain resources/&lt;project_name&gt;/ in the path, such as: ![Test Photo](resources/sample_project/election.jpg) The file should not contain any install.packages(), write functions, setwd(), or getwd(). If there’s anything else that looks odd but you’re not sure, assign jtr13 to review and explain the issue. 10.6 Request changes If there are problems with any of the checks listed above, explain why the pull request cannot be merged and request changes by following these steps: Then, add a changes requested label to this pull request. Your job for this pull request is done for now. Once contributors fix their requests, review again and either move forward with the merge or explain what changes still need to be made. 10.7 Merge the pull request If all is good to go, it’s time to merge the pull request. There are several steps. 10.7.1 Add chapter filename to _bookdown.yml in PR’s branch To access the PR branch: Make sure you are on the PR branch by checking that the PR branch name is shown (not main): Open the _bookdown.yml file. delete everything in the file beginning with rmd_files: [ and then add the name of the new file in single quotes followed by a comma: Why? Because it will be easier to fix the merge conflicts this way. (A better way to do this is to merge main into the PR branch before adding the new file but this can’t be done on GitHub. If there’s interest I will explain how to do this locally.) Save the edited version. Click the resolve conflicts button: Cut the new filename and paste it into the proper location. Then delete the lines with &lt;&lt;&lt;&lt;&lt;&lt;&lt; xxxx, ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; main. In short, the file should look correct when you’re done. Click the “Marked as resolved” button and then the green “Commit merge” button. 10.7.2 PR Leaders only: Add part names to .Rmd for every first article in part Only do this if you are adding the first chapter in a PART. For every first article of each part, add the chapter name on the top of the .Rmd file, then propose changes. The example is like this. 10.7.3 Merge PR and leave a comment Now comes the final step. If you’re not sure that you did things correctly, assign one of the PR merge leaders or @jtr13 to review before you merge the PR. Go back to the conversation tab of the pull requests page, for example: https://github.com/jtr13/cc20/pull/23#issuecomment-728506101 Leave comments for congratulations 🎉 (type :tada:) and then click on the green button for merge. 10.7.4 Check updated version A successful merge means that the addition file or files were added to the project with no merge conflicts. It does not mean that the book will render and deploy to GitHub pages without issues. After the merge, it will take about 5-10 minutes for GitHub Actions to render the book and deploy the updated version. If there’s a problem I will be notified by email and will address it. In other words, your job is done. However if you’re interested, you can check the progress by clicking Actions at the top of the repo. "]]
